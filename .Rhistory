p.value < .01  ~ "**",
p.value < .05  ~ "*",
p.value < .10  ~ ".",
TRUE           ~ "")) |>
select(Function = deliberation_function,
Slope    = prev2_uncertainty.trend,
SE       = SE,
t        = df,
`p-value`= p.value,
signif)
n2_pairs <- pairs(em_n2) |>
summary(infer = TRUE, adjust = "fdr")
## ---------- 3. Nice tables ----------
library(knitr); library(kableExtra)
kable(n1_tbl, digits = 3,
caption = "Linear Slopes of Uncertainty at chunk n−1 (from `gam_smooth`)") |>
kable_styling(full_width = FALSE)
kable(n2_tbl, digits = 3,
caption = "Linear Slopes of Uncertainty at chunk n−2 (from `gam_smooth`)") |>
kable_styling(full_width = FALSE)
kable(n1_pairs, digits = 3,
caption = "Pairwise Differences of n−1 Slopes (FDR-corrected)") |>
kable_styling(full_width = FALSE)
kable(n2_pairs, digits = 3,
caption = "Pairwise Differences of n−2 Slopes (FDR-corrected)") |>
kable_styling(full_width = FALSE)
# Step 5A: Plot effect of prev_uncertainty (n−1)
one_id <- chunks_long$subject_id[!is.na(chunks_long$subject_id)][1]
one_q  <- chunks_long$question[!is.na(chunks_long$question)][1]
rng1 <- range(chunks_long$prev_uncertainty, na.rm = TRUE)
newd1 <- expand.grid(
prev_uncertainty       = seq(rng1[1], rng1[2], length.out = 100),
prev2_uncertainty      = median(chunks_long$prev2_uncertainty, na.rm = TRUE),
deliberation_function  = levels(chunks_long$deliberation_function),
norm_mid               = 0.5,
subject_id             = one_id,
question               = one_q
)
preds1 <- predict(gam_smooth, newdata = newd1, se.fit = TRUE)
newd1$fit <- preds1$fit
newd1$se  <- preds1$se.fit
newd1$upr <- newd1$fit + 1.96 * newd1$se
newd1$lwr <- newd1$fit - 1.96 * newd1$se
ggplot(newd1, aes(prev_uncertainty, fit,
colour = deliberation_function,
fill = deliberation_function)) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = .15, colour = NA) +
geom_line(size = 1) +
labs(x = "Uncertainty at chunk n−1",
y = "Predicted score at chunk n",
title = "Effect of Uncertainty at Chunk n−1",
colour = "Deliberation\nFunction",
fill   = "Deliberation\nFunction") +
theme_minimal(base_size = 13)
# Step 5B: Plot effect of prev2_uncertainty (n−2)
rng2 <- range(chunks_long$prev2_uncertainty, na.rm = TRUE)
newd2 <- expand.grid(
prev2_uncertainty      = seq(rng2[1], rng2[2], length.out = 100),
prev_uncertainty       = median(chunks_long$prev_uncertainty, na.rm = TRUE),
deliberation_function  = levels(chunks_long$deliberation_function),
norm_mid               = 0.5,
subject_id             = one_id,
question               = one_q
)
preds2 <- predict(gam_smooth, newdata = newd2, se.fit = TRUE)
newd2$fit <- preds2$fit
newd2$se  <- preds2$se.fit
newd2$upr <- newd2$fit + 1.96 * newd2$se
newd2$lwr <- newd2$fit - 1.96 * newd2$se
ggplot(newd2, aes(prev2_uncertainty, fit,
colour = deliberation_function,
fill = deliberation_function)) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = .15, colour = NA) +
geom_line(size = 1) +
labs(x = "Uncertainty at chunk n−2",
y = "Predicted score at chunk n",
title = "Effect of Uncertainty at Chunk n−2",
colour = "Deliberation\nFunction",
fill   = "Deliberation\nFunction") +
theme_minimal(base_size = 13)
# Step 6: Heatmap of n−1 × n−2 effects
grid <- expand.grid(
prev_uncertainty       = seq(rng1[1], rng1[2], length.out = 50),
prev2_uncertainty      = seq(rng2[1], rng2[2], length.out = 50),
deliberation_function  = levels(chunks_long$deliberation_function),
norm_mid               = 0.5,
subject_id             = one_id,
question               = one_q
)
preds_grid <- predict(gam_smooth, newdata = grid, se.fit = TRUE)
grid$fit <- preds_grid$fit
ggplot(grid, aes(x = prev_uncertainty, y = prev2_uncertainty, fill = fit)) +
geom_tile() +
scale_fill_gradient2(
low = "green3", mid = "white", high = "red3",
midpoint = mean(grid$fit, na.rm = TRUE),
name = "Predicted\nscore"
) +
facet_wrap(~ deliberation_function, ncol = 2) +
labs(
title = "Predicted Deliberation Score by Combined Uncertainty (n−1 × n−2)",
x = "Uncertainty at chunk n−1",
y = "Uncertainty at chunk n−2"
) +
theme_minimal(base_size = 13) +
theme(
strip.text = element_text(face = "bold"),
legend.title = element_text(face = "bold"),
panel.grid = element_blank()
)
# ----------------------------------------------------------------------------
# Recoding for clarity
# ----------------------------------------------------------------------------
chunks_long_lure <- chunks_long %>%
mutate(
lure_consideration = factor(lure_consideration,
levels = c(0, 1),
labels = c("Lure Non-Considered", "Lure Considered")),
deliberation_function = factor(deliberation_function),
response              = factor(response),
subject_id            = factor(subject_id),
question              = factor(question)
) %>%
filter(lure_consideration %in% c("Lure Non-Considered", "Lure Considered"),
response %in% c("Correct", "Incorrect"))
# ----------------------------------------------------------------------------
# Model (as you did)
# ----------------------------------------------------------------------------
gam_model <- bam(
score ~ lure_consideration * response * deliberation_function +
s(normalized_position, by = interaction(lure_consideration, response, deliberation_function), k = 10) +
s(subject_id, bs = "re") +
s(question, bs = "re"),
data = chunks_long_lure,
method = "fREML"
)
# ----------------------------------------------------------------------------
# Recoding for clarity
# ----------------------------------------------------------------------------
chunks_long_lure <- chunks_long %>%
mutate(
lure_consideration = factor(lure_consideration,
levels = c(0, 1),
labels = c("Lure Non-Considered", "Lure Considered")),
deliberation_function = factor(deliberation_function),
response              = factor(response),
subject_id            = factor(subject_id),
question              = factor(question)
) %>%
filter(lure_consideration %in% c("Lure Non-Considered", "Lure Considered"),
response %in% c("Correct", "Incorrect"))
# ----------------------------------------------------------------------------
# Model (as you did)
# ----------------------------------------------------------------------------
gam_model <- bam(
score ~ lure_consideration * response * deliberation_function +
s(norm_mid, by = interaction(lure_consideration, response, deliberation_function), k = 10) +
s(subject_id, bs = "re") +
s(question, bs = "re"),
data = chunks_long_lure,
method = "fREML"
)
summary(gam_model)
gam.check(gam_model)
appraise(gam_model)
# ----------------------------------------------------------------------------
# Generate Prediction Data
# ----------------------------------------------------------------------------
newdata <- expand.grid(
normalized_position = seq(0, 1, length.out = 10),
deliberation_function = levels(chunks_long_lure$deliberation_function),
response = levels(chunks_long_lure$response),
lure_consideration = levels(chunks_long_lure$lure_consideration)
)
newdata$subject_id <- levels(chunks_long_lure$subject_id)[1]
newdata$question   <- levels(chunks_long_lure$question)[1]
predictions <- predict(
gam_model,
newdata = newdata,
se.fit = TRUE,
exclude = c("s(subject_id)", "s(question)")
)
# ----------------------------------------------------------------------------
# Recoding for clarity
# ----------------------------------------------------------------------------
chunks_long_lure <- chunks_long %>%
mutate(
lure_consideration = factor(lure_consideration,
levels = c(0, 1),
labels = c("Lure Non-Considered", "Lure Considered")),
deliberation_function = factor(deliberation_function),
response              = factor(response),
subject_id            = factor(subject_id),
question              = factor(question)
) %>%
filter(lure_consideration %in% c("Lure Non-Considered", "Lure Considered"),
response %in% c("Correct", "Incorrect"))
# ----------------------------------------------------------------------------
# Model (as you did)
# ----------------------------------------------------------------------------
gam_model <- bam(
score ~ lure_consideration * response * deliberation_function +
s(norm_mid, by = interaction(lure_consideration, response, deliberation_function), k = 10) +
s(subject_id, bs = "re") +
s(question, bs = "re"),
data = chunks_long_lure,
method = "fREML"
)
summary(gam_model)
gam.check(gam_model)
appraise(gam_model)
# ----------------------------------------------------------------------------
# Generate Prediction Data
# ----------------------------------------------------------------------------
newdata <- expand.grid(
norm_mid = seq(0, 1, length.out = 10),
deliberation_function = levels(chunks_long_lure$deliberation_function),
response = levels(chunks_long_lure$response),
lure_consideration = levels(chunks_long_lure$lure_consideration)
)
newdata$subject_id <- levels(chunks_long_lure$subject_id)[1]
newdata$question   <- levels(chunks_long_lure$question)[1]
predictions <- predict(
gam_model,
newdata = newdata,
se.fit = TRUE,
exclude = c("s(subject_id)", "s(question)")
)
newdata$pred <- predictions$fit
newdata$se   <- predictions$se.fit
# ----------------------------------------------------------------------------
# Compute Pairwise Differences: Lure vs No Lure
# ----------------------------------------------------------------------------
newdata$diff <- NA
newdata$pval <- NA
for(df in unique(newdata$deliberation_function)) {
for(resp in unique(newdata$response)) {
for(pos in unique(newdata$normalized_position)) {
tmp <- newdata %>%
filter(deliberation_function == df,
response == resp,
normalized_position == pos)
d  <- tmp$pred[tmp$lure_consideration == "Lure Considered"] -
tmp$pred[tmp$lure_consideration == "Lure Non-Considered"]
se <- sqrt(tmp$se[tmp$lure_consideration == "Lure Considered"]^2 +
tmp$se[tmp$lure_consideration == "Lure Non-Considered"]^2)
zval <- d / se
pval <- 2 * (1 - pnorm(abs(zval)))
newdata$diff[newdata$deliberation_function == df &
newdata$response == resp &
newdata$normalized_position == pos] <- d
newdata$pval[newdata$deliberation_function == df &
newdata$response == resp &
newdata$normalized_position == pos] <- pval
}
}
}
newdata <- newdata %>%
group_by(deliberation_function, response) %>%
mutate(pval_adj = p.adjust(pval, method = "fdr"),
significant = pval_adj < 0.05) %>%
ungroup()
newdata$significant <- newdata$pval_adj < 0.05
# ----------------------------------------------------------------------------
# Significant Regions
# ----------------------------------------------------------------------------
signif_regions <- newdata %>%
arrange(deliberation_function, response, normalized_position) %>%
group_by(deliberation_function, response) %>%
mutate(sig_grp = data.table::rleid(significant)) %>%
filter(significant) %>%
group_by(deliberation_function, response, sig_grp) %>%
summarise(xmin = min(normalized_position),
xmax = max(normalized_position)) %>%
ungroup()
# ----------------------------------------------------------------------------
# Recoding for clarity
# ----------------------------------------------------------------------------
chunks_long_lure <- chunks_long %>%
mutate(
lure_consideration = factor(lure_consideration,
levels = c(0, 1),
labels = c("Lure Non-Considered", "Lure Considered")),
deliberation_function = factor(deliberation_function),
response              = factor(response),
subject_id            = factor(subject_id),
question              = factor(question)
) %>%
filter(lure_consideration %in% c("Lure Non-Considered", "Lure Considered"),
response %in% c("Correct", "Incorrect"))
# ----------------------------------------------------------------------------
# Model (as you did)
# ----------------------------------------------------------------------------
gam_model <- bam(
score ~ lure_consideration * response * deliberation_function +
s(norm_mid, by = interaction(lure_consideration, response, deliberation_function), k = 10) +
s(subject_id, bs = "re") +
s(question, bs = "re"),
data = chunks_long_lure,
method = "fREML"
)
summary(gam_model)
gam.check(gam_model)
appraise(gam_model)
# ----------------------------------------------------------------------------
# Generate Prediction Data
# ----------------------------------------------------------------------------
newdata <- expand.grid(
norm_mid = seq(0, 1, length.out = 10),
deliberation_function = levels(chunks_long_lure$deliberation_function),
response = levels(chunks_long_lure$response),
lure_consideration = levels(chunks_long_lure$lure_consideration)
)
newdata$subject_id <- levels(chunks_long_lure$subject_id)[1]
newdata$question   <- levels(chunks_long_lure$question)[1]
predictions <- predict(
gam_model,
newdata = newdata,
se.fit = TRUE,
exclude = c("s(subject_id)", "s(question)")
)
newdata$pred <- predictions$fit
newdata$se   <- predictions$se.fit
# ----------------------------------------------------------------------------
# Compute Pairwise Differences: Lure vs No Lure
# ----------------------------------------------------------------------------
newdata$diff <- NA
newdata$pval <- NA
for(df in unique(newdata$deliberation_function)) {
for(resp in unique(newdata$response)) {
for(pos in unique(newdata$normalized_position)) {
tmp <- newdata %>%
filter(deliberation_function == df,
response == resp,
normalized_position == pos)
d  <- tmp$pred[tmp$lure_consideration == "Lure Considered"] -
tmp$pred[tmp$lure_consideration == "Lure Non-Considered"]
se <- sqrt(tmp$se[tmp$lure_consideration == "Lure Considered"]^2 +
tmp$se[tmp$lure_consideration == "Lure Non-Considered"]^2)
zval <- d / se
pval <- 2 * (1 - pnorm(abs(zval)))
newdata$diff[newdata$deliberation_function == df &
newdata$response == resp &
newdata$normalized_position == pos] <- d
newdata$pval[newdata$deliberation_function == df &
newdata$response == resp &
newdata$normalized_position == pos] <- pval
}
}
}
newdata <- newdata %>%
group_by(deliberation_function, response) %>%
mutate(pval_adj = p.adjust(pval, method = "fdr"),
significant = pval_adj < 0.05) %>%
ungroup()
newdata$significant <- newdata$pval_adj < 0.05
# ----------------------------------------------------------------------------
# Significant Regions
# ----------------------------------------------------------------------------
signif_regions <- newdata %>%
arrange(deliberation_function, response, norm_mid) %>%
group_by(deliberation_function, response) %>%
mutate(sig_grp = data.table::rleid(significant)) %>%
filter(significant) %>%
group_by(deliberation_function, response, sig_grp) %>%
summarise(xmin = min(norm_mid),
xmax = max(norm_mid)) %>%
ungroup()
# ----------------------------------------------------------------------------
# Plot
# ----------------------------------------------------------------------------
p_final <- ggplot() +
geom_line(data = newdata,
aes(x = norm_mid, y = pred,
color = lure_consideration),
size = 1) +
geom_ribbon(data = newdata,
aes(x = norm_mid, ymin = pred - 1.96 * se, ymax = pred + 1.96 * se,
fill = lure_consideration),
alpha = 0.2, color = NA) +
geom_rect(data = signif_regions,
aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
fill = "grey30", alpha = 0.1) +
facet_grid(response ~ deliberation_function) +
scale_color_manual(values = c("Lure Non-Considered" = "forestgreen",
"Lure Considered"   = "tomato3")) +
scale_fill_manual(values = c("Lure Non-Considered" = "forestgreen",
"Lure Considered"   = "tomato3")) +
theme_apa() +
labs(x = "Normalized Position in Verbalization",
y = "Predicted Score",
color = "Lure Consideration",
fill  = "Lure Consideration")
p_final
# ----------------------------------------------------------------------------
# Save
# ----------------------------------------------------------------------------
ggsave("./Output/gam_trajectory_lure_vs_no_lure_per_response_and_function.png",
p_final, dpi = 600, width = 12, height = 8)
# ----------------------------------------------------------------------------
# Recoding for clarity
# ----------------------------------------------------------------------------
chunks_long_fam <- chunks_long %>%
mutate(
familiar = factor(familiar, levels = c(0,1), labels = c("Unfamiliar", "Familiar")),
deliberation_function = factor(deliberation_function),
subject_id = factor(subject_id),
question   = factor(question)
) %>%
filter(familiar %in% c("Unfamiliar", "Familiar"))
# ----------------------------------------------------------------------------
# Model
# ----------------------------------------------------------------------------
gam_model_fam <- bam(
score ~ familiar * deliberation_function +
s(norm_mid, by = interaction(familiar, deliberation_function), k = 10) +
s(subject_id, bs = "re") +
s(question, bs = "re"),
data = chunks_long_fam,
method = "fREML"
)
summary(gam_model_fam)
gam.check(gam_model_fam)
appraise(gam_model_fam)
# ----------------------------------------------------------------------------
# Generate Prediction Data
# ----------------------------------------------------------------------------
newdata_fam <- expand.grid(
norm_mid = seq(0, 1, length.out = 10),
deliberation_function = levels(chunks_long_fam$deliberation_function),
familiar = levels(chunks_long_fam$familiar)
)
newdata_fam$subject_id <- levels(chunks_long_fam$subject_id)[1]
newdata_fam$question   <- levels(chunks_long_fam$question)[1]
predictions_fam <- predict(
gam_model_fam,
newdata = newdata_fam,
se.fit = TRUE,
exclude = c("s(subject_id)", "s(question)")
)
newdata_fam$pred <- predictions_fam$fit
newdata_fam$se   <- predictions_fam$se.fit
# ----------------------------------------------------------------------------
# Compute Pairwise Differences: Familiar vs Unfamiliar
# ----------------------------------------------------------------------------
newdata_fam$diff <- NA
newdata_fam$pval <- NA
for(df in unique(newdata_fam$deliberation_function)) {
for(pos in unique(newdata_fam$norm_mid)) {
tmp <- newdata_fam %>%
filter(deliberation_function == df,
norm_mid == pos)
d  <- tmp$pred[tmp$familiar == "Familiar"] -
tmp$pred[tmp$familiar == "Unfamiliar"]
se <- sqrt(tmp$se[tmp$familiar == "Familiar"]^2 +
tmp$se[tmp$familiar == "Unfamiliar"]^2)
zval <- d / se
pval <- 2 * (1 - pnorm(abs(zval)))
newdata_fam$diff[newdata_fam$deliberation_function == df &
newdata_fam$norm_mid == pos] <- d
newdata_fam$pval[newdata_fam$deliberation_function == df &
newdata_fam$norm_mid == pos] <- pval
}
}
newdata_fam <- newdata_fam %>%
group_by(deliberation_function) %>%
mutate(pval_adj = p.adjust(pval, method = "fdr"),
significant = pval_adj < 0.05) %>%
ungroup()
# ----------------------------------------------------------------------------
# Significant Regions
# ----------------------------------------------------------------------------
signif_regions_fam <- newdata_fam %>%
arrange(deliberation_function, norm_mid) %>%
group_by(deliberation_function) %>%
mutate(sig_grp = data.table::rleid(significant)) %>%
filter(significant) %>%
group_by(deliberation_function, sig_grp) %>%
summarise(xmin = min(norm_mid),
xmax = max(norm_mid)) %>%
ungroup()
# ----------------------------------------------------------------------------
# Plot
# ----------------------------------------------------------------------------
p_fam <- ggplot() +
geom_line(data = newdata_fam,
aes(x = norm_mid, y = pred,
color = familiar),
size = 1) +
geom_ribbon(data = newdata_fam,
aes(x = norm_mid, ymin = pred - 1.96 * se, ymax = pred + 1.96 * se,
fill = familiar),
alpha = 0.2, color = NA) +
geom_rect(data = signif_regions_fam,
aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
fill = "grey30", alpha = 0.1) +
facet_wrap(~ deliberation_function, scales = "free_y") +
scale_color_manual(values = c("Unfamiliar" = "grey30",
"Familiar" = "steelblue")) +
scale_fill_manual(values = c("Unfamiliar" = "grey30",
"Familiar" = "steelblue")) +
theme_apa() +
labs(x = "Normalized Position in Verbalization",
y = "Predicted Score",
color = "Familiarity",
fill  = "Familiarity")
p_fam
# ----------------------------------------------------------------------------
# Save
# ----------------------------------------------------------------------------
ggsave("./Output/gam_trajectory_familiar_vs_unfamiliar_per_function.png",
p_fam, dpi = 600, width = 12, height = 6)
