# Generate New Data for Predictions
# ----------------------------------------------------------------------------
newdata <- expand.grid(
normalized_position = seq(0, 1, length.out = 100),
deliberation_function = levels(chunks_long$deliberation_function)
)
newdata$subject_id <- levels(chunks_long$subject_id)[1]
newdata$question   <- levels(chunks_long$question)[1]
predictions <- predict(
gam_model,
newdata = newdata,
se.fit = TRUE,
exclude = c("s(subject_id)", "s(question)")
)
newdata$pred <- predictions$fit
newdata$se   <- predictions$se.fit
# ----------------------------------------------------------------------------
# Compute Observed Means for Overlay
# ----------------------------------------------------------------------------
observed_means <- chunks_long %>%
group_by(deliberation_function, normalized_position) %>%
summarise(
mean_score = mean(score, na.rm = TRUE),
se_score   = sd(score, na.rm = TRUE) / sqrt(n())
) %>%
ungroup()
# ----------------------------------------------------------------------------
# Plot: Trajectories per Deliberation Function
# ----------------------------------------------------------------------------
p_final <- ggplot() +
# # Observed Means
# geom_line(data = observed_means,
#           aes(x = normalized_position, y = mean_score, color = deliberation_function),
#           size = 0.8) +
# GAM Fit Lines
geom_line(data = newdata,
aes(x = normalized_position, y = pred, color = deliberation_function),
size = 1) +
# GAM CI
geom_ribbon(data = newdata,
aes(x = normalized_position, ymin = pred - 1.96 * se, ymax = pred + 1.96 * se, fill = deliberation_function),
alpha = 0.2, color = NA) +
facet_wrap(~deliberation_function, ncol = 2, scales = "free_y") +
theme_apa() +
labs(x = "Normalized Position in Verbalization",
y = "Predicted Score",
color = "Deliberation Function",
fill  = "Deliberation Function")
p_final
# ----------------------------------------------------------------------------
# Save Plot
# ----------------------------------------------------------------------------
ggsave("./Output/gam_trajectory_functions_overall_trajectory.png",
p_final, dpi = 600, width = 12, height = 8)
# ----------------------------------------------------------------------------
# Step 1: Generate Predictions Per Deliberation Function
# ----------------------------------------------------------------------------
# Desired subtraction order
delib_functions <- c("Generation", "Justification", "Control", "Regulation")
# Create newdata for predictions
newdata <- expand.grid(
normalized_position = seq(0, 1, length.out = 100),
deliberation_function = delib_functions
)
newdata$subject_id <- levels(chunks_long$subject_id)[1]
newdata$question   <- levels(chunks_long$question)[1]
predictions <- predict(
gam_model,
newdata = newdata,
se.fit = TRUE,
exclude = c("s(subject_id)", "s(question)")
)
newdata$pred <- predictions$fit
newdata$se   <- predictions$se.fit
# ----------------------------------------------------------------------------
# Step 2: Compute Manual Pairwise Differences
# ----------------------------------------------------------------------------
pairs <- combn(delib_functions, 2, simplify = FALSE)
diff_dfs <- list()
for(pair in pairs) {
func1 <- pair[1]  # Always subtract in this fixed order
func2 <- pair[2]
df1 <- newdata %>% filter(deliberation_function == func1)
df2 <- newdata %>% filter(deliberation_function == func2)
diff_df <- df1 %>%
mutate(
deliberation_function_1 = func1,
deliberation_function_2 = func2,
diff = df1$pred - df2$pred,   # Always func1 - func2
se_diff = sqrt(df1$se^2 + df2$se^2),
zval = diff / se_diff,
pval = 2 * (1 - pnorm(abs(zval))),
lower_ci = diff - 1.96 * se_diff,
upper_ci = diff + 1.96 * se_diff
)
diff_dfs[[paste(func1, func2, sep = "_vs_")]] <- diff_df
}
diff_all <- bind_rows(diff_dfs)
# ----------------------------------------------------------------------------
# Step 3: Correct for Multiple Comparisons (FDR)
# ----------------------------------------------------------------------------
diff_all <- diff_all %>%
group_by(deliberation_function_1, deliberation_function_2) %>%
mutate(pval_adj = p.adjust(pval, method = "fdr"),
significant = pval_adj < 0.05) %>%
ungroup()
# ----------------------------------------------------------------------------
# Step 4: Identify Significant Regions
# ----------------------------------------------------------------------------
signif_regions_all <- diff_all %>%
arrange(deliberation_function_1, deliberation_function_2, normalized_position) %>%
group_by(deliberation_function_1, deliberation_function_2) %>%
mutate(sig_grp = rleid(significant)) %>%
filter(significant) %>%
group_by(deliberation_function_1, deliberation_function_2, sig_grp) %>%
summarise(
xmin = min(normalized_position),
xmax = max(normalized_position)
) %>%
ungroup()
# ----------------------------------------------------------------------------
# Step 5: Plot Difference Curves with CI and Significance Bands
# ----------------------------------------------------------------------------
diff_plots <- list()
for(name in names(diff_dfs)) {
df <- diff_dfs[[name]]
sig_regions <- signif_regions_all %>%
filter(deliberation_function_1 == unique(df$deliberation_function_1),
deliberation_function_2 == unique(df$deliberation_function_2))
p <- ggplot(df, aes(x = normalized_position, y = diff)) +
# Significance Regions
geom_rect(data = sig_regions,
aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE,
fill = "grey30", alpha = 0.1) +
# Difference curve with CI
geom_line(size = 1, color = "black") +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci),
fill = "grey70", alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(
title = paste0("Difference: ", unique(df$deliberation_function_1),
" - ", unique(df$deliberation_function_2)),
x = "Normalized Position in Verbalization",
y = "Difference in Score"
) +
theme_minimal(base_size = 14)
diff_plots[[name]] <- p
}
p_diff_combined <- wrap_plots(diff_plots, ncol = 2)
p_diff_combined
# ----------------------------------------------------------------------------
# Step 6: Save Outputs
# ----------------------------------------------------------------------------
ggsave("./Output/gam_pairwise_functions_difference_trajectory.png",
p_diff_combined, width = 14, height = 10, dpi = 600)
# ----------------------------------------------------------------------------
# Fit GAM Model with Beta family and Random Effects
# ----------------------------------------------------------------------------
gam_model <- bam(
score ~ response * deliberation_function +
s(normalized_position, by = interaction(response, deliberation_function), k = 10) +
s(subject_id, bs = "re") +
s(question, bs = "re"),
data = chunks_long,
method = "fREML"
)
summary(gam_model)
# ----------------------------------------------------------------------------
# Diagnostics
# ----------------------------------------------------------------------------
gam.check(gam_model)
appraise(gam_model)
# ----------------------------------------------------------------------------
# Generate New Data for Predictions
# ----------------------------------------------------------------------------
newdata <- expand.grid(
normalized_position = seq(0, 1, length.out = 100),
deliberation_function = levels(chunks_long$deliberation_function),
response = levels(chunks_long$response)
)
# Add dummy subject_id and question for prediction
newdata$subject_id <- levels(chunks_long$subject_id)[1]
newdata$question   <- levels(chunks_long$question)[1]
# Predict ignoring random effects
predictions <- predict(
gam_model,
newdata = newdata,
se.fit = TRUE,
exclude = c("s(subject_id)", "s(question)")
)
newdata$pred <- predictions$fit
newdata$se   <- predictions$se.fit
# ----------------------------------------------------------------------------
# Compute Pairwise Differences with z-test
# ----------------------------------------------------------------------------
newdata$diff <- NA
newdata$pval <- NA
for(f in unique(newdata$deliberation_function)) {
for(pos in unique(newdata$normalized_position)) {
tmp <- newdata %>%
filter(deliberation_function == f, normalized_position == pos)
d  <- tmp$pred[tmp$response == "Unbiased Response"] - tmp$pred[tmp$response == "Biased Response"]
se <- sqrt(tmp$se[tmp$response == "Unbiased Response"]^2 + tmp$se[tmp$response == "Biased Response"]^2)
zval <- d / se
pval <- 2 * (1 - pnorm(abs(zval)))
newdata$diff[newdata$deliberation_function == f & newdata$normalized_position == pos] <- d
newdata$pval[newdata$deliberation_function == f & newdata$normalized_position == pos] <- pval
}
}
# ----------------------------------------------------------------------------
# Multiple Comparisons Correction
# ----------------------------------------------------------------------------
newdata <- newdata %>%
group_by(deliberation_function) %>%
mutate(pval_adj = p.adjust(pval, method = "fdr"),
significant = pval_adj < 0.05) %>%
ungroup()
newdata$significant <- newdata$pval_adj < 0.05
# ----------------------------------------------------------------------------
# Compute Observed Means for Overlay
# ----------------------------------------------------------------------------
observed_means <- chunks_long %>%
group_by(deliberation_function, response, normalized_position) %>%
summarise(
mean_score = mean(score, na.rm = TRUE),
se_score   = sd(score, na.rm = TRUE) / sqrt(n())
) %>%
ungroup()
# Identify significant contiguous regions
signif_regions <- newdata %>%
arrange(deliberation_function, normalized_position) %>%
group_by(deliberation_function) %>%
mutate(sig_grp = rleid(significant)) %>%   # rleid = run-length encoding id
filter(significant) %>%
group_by(deliberation_function, sig_grp) %>%
summarise(xmin = min(normalized_position),
xmax = max(normalized_position)) %>%
ungroup()
# ----------------------------------------------------------------------------
# Plot: Faceted Smooth Trajectories with Significance Zones
# ----------------------------------------------------------------------------
p_final <- ggplot() +
# # Observed Means
# geom_line(data = observed_means,
#           aes(x = normalized_position, y = mean_score, color = response),
#           size = 0.8) +
# GAM Fit Lines
geom_line(data = newdata,
aes(x = normalized_position, y = pred, color = response),
size = 1) +
# GAM CI
geom_ribbon(data = newdata,
aes(x = normalized_position, ymin = pred - 1.96 * se, ymax = pred + 1.96 * se, fill = response),
alpha = 0.2, color = NA) +
# Clean Significance Bands
geom_rect(data = signif_regions,
aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
fill = "grey30", alpha = 0.1) +
facet_wrap(~deliberation_function, ncol = 2, scales = "free_y") +
scale_color_manual(values = c("Unbiased Response" = "forestgreen",
"Biased Response"   = "tomato3")) +
scale_fill_manual(values = c("Unbiased Response" = "forestgreen",
"Biased Response"   = "tomato3")) +
theme_apa() +
labs(x = "Normalized Position in Verbalization",
y = "Predicted Score",
color = "Response Type",
fill  = "Response Type")
p_final
# ----------------------------------------------------------------------------
# Save Plot
# ----------------------------------------------------------------------------
ggsave("./Output/gam_trajectory_per_response_and_function.png",
p_final, dpi = 600, width = 12, height = 8)
# ----------------------------------------------------------------------------
# Recoding for clarity
# ----------------------------------------------------------------------------
chunks_long_lure <- chunks_long %>%
mutate(
lure_consideration = factor(lure_consideration,
levels = c(0, 1),
labels = c("Lure Non-Considered", "Lure Considered")),
deliberation_function = factor(deliberation_function),
response              = factor(response),
subject_id            = factor(subject_id),
question              = factor(question)
) %>%
filter(lure_consideration %in% c("Lure Non-Considered", "Lure Considered"),
response %in% c("Unbiased Response", "Biased Response"))
# ----------------------------------------------------------------------------
# Model (as you did)
# ----------------------------------------------------------------------------
gam_model <- bam(
score ~ lure_consideration * response * deliberation_function +
s(normalized_position, by = interaction(lure_consideration, response, deliberation_function), k = 10) +
s(subject_id, bs = "re") +
s(question, bs = "re"),
data = chunks_long_lure,
method = "fREML"
)
summary(gam_model)
gam.check(gam_model)
appraise(gam_model)
# ----------------------------------------------------------------------------
# Generate Prediction Data
# ----------------------------------------------------------------------------
newdata <- expand.grid(
normalized_position = seq(0, 1, length.out = 100),
deliberation_function = levels(chunks_long_lure$deliberation_function),
response = levels(chunks_long_lure$response),
lure_consideration = levels(chunks_long_lure$lure_consideration)
)
newdata$subject_id <- levels(chunks_long_lure$subject_id)[1]
newdata$question   <- levels(chunks_long_lure$question)[1]
predictions <- predict(
gam_model,
newdata = newdata,
se.fit = TRUE,
exclude = c("s(subject_id)", "s(question)")
)
newdata$pred <- predictions$fit
newdata$se   <- predictions$se.fit
# ----------------------------------------------------------------------------
# Compute Pairwise Differences: Lure vs No Lure
# ----------------------------------------------------------------------------
newdata$diff <- NA
newdata$pval <- NA
for(df in unique(newdata$deliberation_function)) {
for(resp in unique(newdata$response)) {
for(pos in unique(newdata$normalized_position)) {
tmp <- newdata %>%
filter(deliberation_function == df,
response == resp,
normalized_position == pos)
d  <- tmp$pred[tmp$lure_consideration == "Lure Considered"] -
tmp$pred[tmp$lure_consideration == "Lure Non-Considered"]
se <- sqrt(tmp$se[tmp$lure_consideration == "Lure Considered"]^2 +
tmp$se[tmp$lure_consideration == "Lure Non-Considered"]^2)
zval <- d / se
pval <- 2 * (1 - pnorm(abs(zval)))
newdata$diff[newdata$deliberation_function == df &
newdata$response == resp &
newdata$normalized_position == pos] <- d
newdata$pval[newdata$deliberation_function == df &
newdata$response == resp &
newdata$normalized_position == pos] <- pval
}
}
}
newdata <- newdata %>%
group_by(deliberation_function, response) %>%
mutate(pval_adj = p.adjust(pval, method = "fdr"),
significant = pval_adj < 0.05) %>%
ungroup()
newdata$significant <- newdata$pval_adj < 0.05
# ----------------------------------------------------------------------------
# Significant Regions
# ----------------------------------------------------------------------------
signif_regions <- newdata %>%
arrange(deliberation_function, response, normalized_position) %>%
group_by(deliberation_function, response) %>%
mutate(sig_grp = data.table::rleid(significant)) %>%
filter(significant) %>%
group_by(deliberation_function, response, sig_grp) %>%
summarise(xmin = min(normalized_position),
xmax = max(normalized_position)) %>%
ungroup()
# ----------------------------------------------------------------------------
# Plot
# ----------------------------------------------------------------------------
p_final <- ggplot() +
geom_line(data = newdata,
aes(x = normalized_position, y = pred,
color = lure_consideration),
size = 1) +
geom_ribbon(data = newdata,
aes(x = normalized_position, ymin = pred - 1.96 * se, ymax = pred + 1.96 * se,
fill = lure_consideration),
alpha = 0.2, color = NA) +
geom_rect(data = signif_regions,
aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
fill = "grey30", alpha = 0.1) +
facet_grid(response ~ deliberation_function, scales = "free_y") +
scale_color_manual(values = c("Lure Non-Considered" = "forestgreen",
"Lure Considered"   = "tomato3")) +
scale_fill_manual(values = c("Lure Non-Considered" = "forestgreen",
"Lure Considered"   = "tomato3")) +
theme_apa() +
labs(x = "Normalized Position in Verbalization",
y = "Predicted Score",
color = "Lure Consideration",
fill  = "Lure Consideration")
p_final
# ----------------------------------------------------------------------------
# Save
# ----------------------------------------------------------------------------
ggsave("./Output/gam_trajectory_lure_vs_no_lure_per_response_and_function.png",
p_final, dpi = 600, width = 12, height = 8)
# ----------------------------------------------------------------------------
# Recoding for clarity
# ----------------------------------------------------------------------------
chunks_long_fam <- chunks_long %>%
mutate(
familiar = factor(familiar, levels = c(0,1), labels = c("Unfamiliar", "Familiar")),
deliberation_function = factor(deliberation_function),
subject_id = factor(subject_id),
question   = factor(question)
) %>%
filter(familiar %in% c("Unfamiliar", "Familiar"))
# ----------------------------------------------------------------------------
# Model
# ----------------------------------------------------------------------------
gam_model_fam <- bam(
score ~ familiar * deliberation_function +
s(normalized_position, by = interaction(familiar, deliberation_function), k = 10) +
s(subject_id, bs = "re") +
s(question, bs = "re"),
data = chunks_long_fam,
method = "fREML"
)
summary(gam_model_fam)
gam.check(gam_model_fam)
appraise(gam_model_fam)
# ----------------------------------------------------------------------------
# Generate Prediction Data
# ----------------------------------------------------------------------------
newdata_fam <- expand.grid(
normalized_position = seq(0, 1, length.out = 100),
deliberation_function = levels(chunks_long_fam$deliberation_function),
familiar = levels(chunks_long_fam$familiar)
)
newdata_fam$subject_id <- levels(chunks_long_fam$subject_id)[1]
newdata_fam$question   <- levels(chunks_long_fam$question)[1]
predictions_fam <- predict(
gam_model_fam,
newdata = newdata_fam,
se.fit = TRUE,
exclude = c("s(subject_id)", "s(question)")
)
newdata_fam$pred <- predictions_fam$fit
newdata_fam$se   <- predictions_fam$se.fit
# ----------------------------------------------------------------------------
# Compute Pairwise Differences: Familiar vs Unfamiliar
# ----------------------------------------------------------------------------
newdata_fam$diff <- NA
newdata_fam$pval <- NA
for(df in unique(newdata_fam$deliberation_function)) {
for(pos in unique(newdata_fam$normalized_position)) {
tmp <- newdata_fam %>%
filter(deliberation_function == df,
normalized_position == pos)
d  <- tmp$pred[tmp$familiar == "Familiar"] -
tmp$pred[tmp$familiar == "Unfamiliar"]
se <- sqrt(tmp$se[tmp$familiar == "Familiar"]^2 +
tmp$se[tmp$familiar == "Unfamiliar"]^2)
zval <- d / se
pval <- 2 * (1 - pnorm(abs(zval)))
newdata_fam$diff[newdata_fam$deliberation_function == df &
newdata_fam$normalized_position == pos] <- d
newdata_fam$pval[newdata_fam$deliberation_function == df &
newdata_fam$normalized_position == pos] <- pval
}
}
newdata_fam <- newdata_fam %>%
group_by(deliberation_function) %>%
mutate(pval_adj = p.adjust(pval, method = "fdr"),
significant = pval_adj < 0.05) %>%
ungroup()
# ----------------------------------------------------------------------------
# Significant Regions
# ----------------------------------------------------------------------------
signif_regions_fam <- newdata_fam %>%
arrange(deliberation_function, normalized_position) %>%
group_by(deliberation_function) %>%
mutate(sig_grp = data.table::rleid(significant)) %>%
filter(significant) %>%
group_by(deliberation_function, sig_grp) %>%
summarise(xmin = min(normalized_position),
xmax = max(normalized_position)) %>%
ungroup()
# ----------------------------------------------------------------------------
# Plot
# ----------------------------------------------------------------------------
p_fam <- ggplot() +
geom_line(data = newdata_fam,
aes(x = normalized_position, y = pred,
color = familiar),
size = 1) +
geom_ribbon(data = newdata_fam,
aes(x = normalized_position, ymin = pred - 1.96 * se, ymax = pred + 1.96 * se,
fill = familiar),
alpha = 0.2, color = NA) +
geom_rect(data = signif_regions_fam,
aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
fill = "grey30", alpha = 0.1) +
facet_wrap(~ deliberation_function, scales = "free_y") +
scale_color_manual(values = c("Unfamiliar" = "grey30",
"Familiar" = "steelblue")) +
scale_fill_manual(values = c("Unfamiliar" = "grey30",
"Familiar" = "steelblue")) +
theme_apa() +
labs(x = "Normalized Position in Verbalization",
y = "Predicted Score",
color = "Familiarity",
fill  = "Familiarity")
p_fam
# ----------------------------------------------------------------------------
# Save
# ----------------------------------------------------------------------------
ggsave("./Output/gam_trajectory_familiar_vs_unfamiliar_per_function.png",
p_fam, dpi = 600, width = 12, height = 6)
