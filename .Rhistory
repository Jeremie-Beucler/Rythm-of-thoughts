ggplot(smoothed_resp, aes(x = position, y = similarity, color = deliberation_function)) +
geom_line(size = 1, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.4) +
facet_wrap(~response, scales = "free_y") +
theme_minimal() +
labs(x = "Position in Transcription (Words)",
y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Words) by Response")
ggsave("../Output/mean_trajectory_per_word_by_response.png", dpi = 600, width = 14, height = 8)
# --------------------------------------------------------------------
# Plot Normalized Position Trajectory by Response (All Functions Together)
# --------------------------------------------------------------------
smoothed_norm_resp <- smooth_trajectory_response(mean_trajectory_norm_resp, window = 20)
ggplot(smoothed_norm_resp, aes(x = position, y = similarity, color = deliberation_function)) +
geom_line(size = 1, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.4) +
facet_wrap(~response, scales = "free_y") +
theme_minimal() +
labs(x = "Normalized Position in Transcription",
y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Normalized Position) by Response")
ggsave("../Output/mean_trajectory_norm_by_response.png", dpi = 600, width = 14, height = 8)
knitr::opts_chunk$set(echo = TRUE)
# --------------------------------------------------------------------
# Libraries
# --------------------------------------------------------------------
library(tidyverse)
library(zoo)
library(ggplot2)
library(ggthemes)
library(here)
library(data.table)
# --------------------------------------------------------------------
# Load Data
# --------------------------------------------------------------------
results_df <- read.csv("./Data/embedding_flow_similarity.csv") %>%
rename(deliberation_function = function.)
# --------------------------------------------------------------------
# Parameters
# --------------------------------------------------------------------
functions <- c('control', 'generation', 'justification', 'regulation')
# --------------------------------------------------------------------
# Compute Transcription Length (Number of Words)
# --------------------------------------------------------------------
transcription_lengths <- results_df %>%
group_by(subject_id, question) %>%
summarise(n_words = max(end_word)) %>%
ungroup()
# Merge Response Info
transcription_lengths <- transcription_lengths %>%
left_join(results_df %>% select(subject_id, question, response) %>% distinct(),
by = c("subject_id", "question"))
# --------------------------------------------------------------------
# Summary Statistics (Overall)
# --------------------------------------------------------------------
print("Summary Statistics for Transcription Length (Words):")
summary(transcription_lengths$n_words)
# --------------------------------------------------------------------
# Summary Statistics Grouped by Response
# --------------------------------------------------------------------
print("Summary Statistics Grouped by Response:")
transcription_lengths %>%
group_by(response) %>%
summarise(
count = n(),
mean = mean(n_words),
sd = sd(n_words),
min = min(n_words),
p25 = quantile(n_words, 0.25),
median = median(n_words),
p75 = quantile(n_words, 0.75),
max = max(n_words)
)
# --------------------------------------------------------------------
# Proportion of Each Response
# --------------------------------------------------------------------
transcription_lengths %>%
count(response) %>%
mutate(proportion = n / sum(n))
# --------------------------------------------------------------------
# Plot Histogram of Transcription Length (Overall)
# --------------------------------------------------------------------
ggplot(transcription_lengths, aes(x = n_words)) +
geom_histogram(bins = 30, fill = "#1f77b4", color = "white", alpha = 0.8) +
geom_density(aes(y = ..count..), color = "black", linewidth = 1) +
labs(x = "Number of Words in Transcription",
y = "Count",
title = "Distribution of Transcription Lengths (Words)") +
theme_minimal()
ggsave("../Output/transcription_length_histogram.png", dpi = 600, width = 8, height = 5)
# --------------------------------------------------------------------
# Plot Histogram of Transcription Length (Grouped by Response)
# --------------------------------------------------------------------
ggplot(transcription_lengths, aes(x = n_words, fill = response)) +
geom_histogram(bins = 30, alpha = 0.7, position = "identity") +
labs(x = "Number of Words in Transcription",
y = "Count",
title = "Distribution of Transcription Lengths by Response") +
theme_minimal() +
facet_wrap(~response, ncol = 2)
ggsave("../Output/transcription_length_histogram_by_response.png", dpi = 600, width = 8, height = 5)
# filter only response = Reflect or Lure in results_df
results_df <- results_df %>%
filter(response %in% c("Reflect", "Lure"))
# filter transcription_lengths > 100
results_df <- results_df %>%
filter(transcription_length < 100)
# look at correlation for each question between similarity
library(corrr)   # For clean correlation tables & plots (optional)
# --------------------------------------------------------------------
# Pivot Wider: Functions as Columns
# --------------------------------------------------------------------
cor_data <- results_df %>%
select(subject_id, question, start_word, deliberation_function, similarity) %>%
pivot_wider(
names_from = deliberation_function,
values_from = similarity
)
# --------------------------------------------------------------------
# Compute Correlation Matrix
# --------------------------------------------------------------------
# Remove missing values (you could also use pairwise.complete.obs)
cor_matrix <- cor(
cor_data %>% select(-subject_id, -question, -start_word),
use = "pairwise.complete.obs",
method = "pearson"
)
print(cor_matrix)
# --------------------------------------------------------------------
# Optional: Visualization
# --------------------------------------------------------------------
# Heatmap
library(ggcorrplot)
ggcorrplot(cor_matrix,
lab = TRUE,
type = "lower",
colors = c("red", "white", "blue"),
title = "Correlation Between Deliberation Functions") +
theme_minimal()
ggsave("../Output/function_correlation_matrix.png", dpi = 600, width = 6, height = 5)
# --------------------------------------------------------------------
# Aggregate Mean Trajectories per Word Position
# --------------------------------------------------------------------
mean_trajectory <- results_df %>%
group_by(deliberation_function, start_word) %>%
summarise(similarity = mean(similarity, na.rm = TRUE)) %>%
rename(position = start_word)
# --------------------------------------------------------------------
# Compute Transcription Length per Response
# --------------------------------------------------------------------
results_df <- results_df %>%
group_by(subject_id, question) %>%
mutate(transcription_length = max(end_word)) %>%
ungroup()
# --------------------------------------------------------------------
# Aggregate Mean Trajectories per Normalized Position
# --------------------------------------------------------------------
results_df <- results_df %>%
mutate(normalized_position = start_word / transcription_length)
mean_trajectory_norm <- results_df %>%
group_by(deliberation_function, normalized_position) %>%
summarise(similarity = mean(similarity, na.rm = TRUE)) %>%
rename(position = normalized_position)
# --------------------------------------------------------------------
# Smoothing Function
# --------------------------------------------------------------------
smooth_trajectory <- function(df, window = 5) {
df %>%
group_by(deliberation_function) %>%
arrange(position) %>%
mutate(similarity = rollmean(similarity, k = window, fill = NA, align = "center")) %>%
drop_na()
}
# --------------------------------------------------------------------
# Plot Per-Word Position Trajectory (All Functions Together)
# --------------------------------------------------------------------
smoothed <- smooth_trajectory(mean_trajectory, window = 5)
ggplot(smoothed, aes(x = position, y = similarity, color = deliberation_function)) +
geom_line(size = 1.2, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.2) +
theme_minimal() +
labs(x = "Position in Transcription (Words)", y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Words)")
ggsave("./Output/mean_trajectory_per_word_smoothed.png", dpi = 600, width = 12, height = 6)
# --------------------------------------------------------------------
# Plot Per-Word Position Trajectory (Separate Plots)
# --------------------------------------------------------------------
ggplot(smoothed, aes(x = position, y = similarity)) +
geom_line(size = 1, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.2) +
facet_wrap(~deliberation_function, scales = "free_y") +
theme_minimal() +
labs(x = "Position in Transcription (Words)", y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Words)")
ggsave("./Output/mean_trajectory_per_word_facets.png", dpi = 600, width = 12, height = 8)
# --------------------------------------------------------------------
# Plot Normalized Position Trajectory (All Functions Together)
# --------------------------------------------------------------------
smoothed_norm <- smooth_trajectory(mean_trajectory_norm, window = 10)
ggplot(smoothed_norm, aes(x = position, y = similarity, color = deliberation_function)) +
geom_line(size = 1.2, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.2) +
theme_minimal() +
labs(x = "Normalized Position (0=start, 1=end)", y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Normalized Position)")
ggsave("./Output/mean_trajectory_norm_smoothed.png", dpi = 600, width = 12, height = 6)
# --------------------------------------------------------------------
# Plot Normalized Position Trajectory (Separate Plots)
# --------------------------------------------------------------------
ggplot(smoothed_norm, aes(x = position, y = similarity)) +
geom_line(size = 1, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.2) +
facet_wrap(~deliberation_function, scales = "free_y") +
theme_minimal() +
labs(x = "Normalized Position", y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Normalized Position)")
ggsave("./Output/mean_trajectory_norm_facets.png", dpi = 600, width = 12, height = 8)
# --------------------------------------------------------------------
# Aggregate Mean Trajectories per Word Position by Response
# --------------------------------------------------------------------
mean_trajectory_resp <- results_df %>%
group_by(response, deliberation_function, start_word) %>%
summarise(similarity = mean(similarity, na.rm = TRUE)) %>%
rename(position = start_word)
# --------------------------------------------------------------------
# Aggregate Mean Trajectories per Normalized Position by Response
# --------------------------------------------------------------------
mean_trajectory_norm_resp <- results_df %>%
group_by(response, deliberation_function, normalized_position) %>%
summarise(similarity = mean(similarity, na.rm = TRUE)) %>%
rename(position = normalized_position)
# --------------------------------------------------------------------
# Smoothing Function for Response Grouping
# --------------------------------------------------------------------
smooth_trajectory_response <- function(df, window = 5) {
df %>%
group_by(response, deliberation_function) %>%
arrange(position) %>%
mutate(similarity = rollmean(similarity, k = window, fill = NA, align = "center")) %>%
drop_na()
}
# --------------------------------------------------------------------
# Plot Per-Word Position Trajectory by Response (All Functions Together)
# --------------------------------------------------------------------
smoothed_resp <- smooth_trajectory_response(mean_trajectory_resp, window = 10)
ggplot(smoothed_resp, aes(x = position, y = similarity, color = deliberation_function)) +
geom_line(size = 1, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.4) +
facet_wrap(~response, scales = "free_y") +
theme_minimal() +
labs(x = "Position in Transcription (Words)",
y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Words) by Response")
ggsave("../Output/mean_trajectory_per_word_by_response.png", dpi = 600, width = 14, height = 8)
# --------------------------------------------------------------------
# Plot Normalized Position Trajectory by Response (All Functions Together)
# --------------------------------------------------------------------
smoothed_norm_resp <- smooth_trajectory_response(mean_trajectory_norm_resp, window = 20)
ggplot(smoothed_norm_resp, aes(x = position, y = similarity, color = deliberation_function)) +
geom_line(size = 1, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.4) +
facet_wrap(~response, scales = "free_y") +
theme_minimal() +
labs(x = "Normalized Position in Transcription",
y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Normalized Position) by Response")
ggsave("../Output/mean_trajectory_norm_by_response.png", dpi = 600, width = 14, height = 8)
knitr::opts_chunk$set(echo = TRUE)
# --------------------------------------------------------------------
# Libraries
# --------------------------------------------------------------------
library(tidyverse)
library(zoo)
library(ggplot2)
library(ggthemes)
library(here)
library(data.table)
# --------------------------------------------------------------------
# Load Data
# --------------------------------------------------------------------
results_df <- read.csv("./Data/embedding_flow_similarity.csv") %>%
rename(deliberation_function = function.)
# --------------------------------------------------------------------
# Parameters
# --------------------------------------------------------------------
functions <- c('control', 'generation', 'justification', 'regulation')
# --------------------------------------------------------------------
# Compute Transcription Length (Number of Words)
# --------------------------------------------------------------------
transcription_lengths <- results_df %>%
group_by(subject_id, question) %>%
summarise(n_words = max(end_word)) %>%
ungroup()
# Merge Response Info
transcription_lengths <- transcription_lengths %>%
left_join(results_df %>% select(subject_id, question, response) %>% distinct(),
by = c("subject_id", "question"))
# --------------------------------------------------------------------
# Summary Statistics (Overall)
# --------------------------------------------------------------------
print("Summary Statistics for Transcription Length (Words):")
summary(transcription_lengths$n_words)
# --------------------------------------------------------------------
# Summary Statistics Grouped by Response
# --------------------------------------------------------------------
print("Summary Statistics Grouped by Response:")
transcription_lengths %>%
group_by(response) %>%
summarise(
count = n(),
mean = mean(n_words),
sd = sd(n_words),
min = min(n_words),
p25 = quantile(n_words, 0.25),
median = median(n_words),
p75 = quantile(n_words, 0.75),
max = max(n_words)
)
# --------------------------------------------------------------------
# Proportion of Each Response
# --------------------------------------------------------------------
transcription_lengths %>%
count(response) %>%
mutate(proportion = n / sum(n))
# --------------------------------------------------------------------
# Plot Histogram of Transcription Length (Overall)
# --------------------------------------------------------------------
ggplot(transcription_lengths, aes(x = n_words)) +
geom_histogram(bins = 30, fill = "#1f77b4", color = "white", alpha = 0.8) +
geom_density(aes(y = ..count..), color = "black", linewidth = 1) +
labs(x = "Number of Words in Transcription",
y = "Count",
title = "Distribution of Transcription Lengths (Words)") +
theme_minimal()
ggsave("../Output/transcription_length_histogram.png", dpi = 600, width = 8, height = 5)
# --------------------------------------------------------------------
# Plot Histogram of Transcription Length (Grouped by Response)
# --------------------------------------------------------------------
ggplot(transcription_lengths, aes(x = n_words, fill = response)) +
geom_histogram(bins = 30, alpha = 0.7, position = "identity") +
labs(x = "Number of Words in Transcription",
y = "Count",
title = "Distribution of Transcription Lengths by Response") +
theme_minimal() +
facet_wrap(~response, ncol = 2)
ggsave("../Output/transcription_length_histogram_by_response.png", dpi = 600, width = 8, height = 5)
# filter only response = Reflect or Lure in results_df
results_df <- results_df %>%
filter(response %in% c("Reflect", "Lure"))
# filter transcription_lengths > 100
results_df <- results_df %>%
filter(transcription_length < 100)
# look at correlation for each question between similarity
library(corrr)   # For clean correlation tables & plots (optional)
# --------------------------------------------------------------------
# Pivot Wider: Functions as Columns
# --------------------------------------------------------------------
cor_data <- results_df %>%
select(subject_id, question, start_word, deliberation_function, similarity) %>%
pivot_wider(
names_from = deliberation_function,
values_from = similarity
)
# --------------------------------------------------------------------
# Compute Correlation Matrix
# --------------------------------------------------------------------
# Remove missing values (you could also use pairwise.complete.obs)
cor_matrix <- cor(
cor_data %>% select(-subject_id, -question, -start_word),
use = "pairwise.complete.obs",
method = "pearson"
)
print(cor_matrix)
# --------------------------------------------------------------------
# Optional: Visualization
# --------------------------------------------------------------------
# Heatmap
library(ggcorrplot)
ggcorrplot(cor_matrix,
lab = TRUE,
type = "lower",
colors = c("red", "white", "blue"),
title = "Correlation Between Deliberation Functions") +
theme_minimal()
ggsave("../Output/function_correlation_matrix.png", dpi = 600, width = 6, height = 5)
# --------------------------------------------------------------------
# Aggregate Mean Trajectories per Word Position
# --------------------------------------------------------------------
mean_trajectory <- results_df %>%
group_by(deliberation_function, start_word) %>%
summarise(similarity = mean(similarity, na.rm = TRUE)) %>%
rename(position = start_word)
# --------------------------------------------------------------------
# Compute Transcription Length per Response
# --------------------------------------------------------------------
results_df <- results_df %>%
group_by(subject_id, question) %>%
mutate(transcription_length = max(end_word)) %>%
ungroup()
# --------------------------------------------------------------------
# Aggregate Mean Trajectories per Normalized Position
# --------------------------------------------------------------------
results_df <- results_df %>%
mutate(normalized_position = start_word / transcription_length)
mean_trajectory_norm <- results_df %>%
group_by(deliberation_function, normalized_position) %>%
summarise(similarity = mean(similarity, na.rm = TRUE)) %>%
rename(position = normalized_position)
# --------------------------------------------------------------------
# Smoothing Function
# --------------------------------------------------------------------
smooth_trajectory <- function(df, window = 5) {
df %>%
group_by(deliberation_function) %>%
arrange(position) %>%
mutate(similarity = rollmean(similarity, k = window, fill = NA, align = "center")) %>%
drop_na()
}
# --------------------------------------------------------------------
# Plot Per-Word Position Trajectory (All Functions Together)
# --------------------------------------------------------------------
smoothed <- smooth_trajectory(mean_trajectory, window = 5)
ggplot(smoothed, aes(x = position, y = similarity, color = deliberation_function)) +
geom_line(size = 1.2, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.2) +
theme_minimal() +
labs(x = "Position in Transcription (Words)", y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Words)")
ggsave("./Output/mean_trajectory_per_word_smoothed.png", dpi = 600, width = 12, height = 6)
# --------------------------------------------------------------------
# Plot Per-Word Position Trajectory (Separate Plots)
# --------------------------------------------------------------------
ggplot(smoothed, aes(x = position, y = similarity)) +
geom_line(size = 1, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.2) +
facet_wrap(~deliberation_function, scales = "free_y") +
theme_minimal() +
labs(x = "Position in Transcription (Words)", y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Words)")
ggsave("./Output/mean_trajectory_per_word_facets.png", dpi = 600, width = 12, height = 8)
# --------------------------------------------------------------------
# Plot Normalized Position Trajectory (All Functions Together)
# --------------------------------------------------------------------
smoothed_norm <- smooth_trajectory(mean_trajectory_norm, window = 10)
ggplot(smoothed_norm, aes(x = position, y = similarity, color = deliberation_function)) +
geom_line(size = 1.2, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.2) +
theme_minimal() +
labs(x = "Normalized Position (0=start, 1=end)", y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Normalized Position)")
ggsave("./Output/mean_trajectory_norm_smoothed.png", dpi = 600, width = 12, height = 6)
# --------------------------------------------------------------------
# Plot Normalized Position Trajectory (Separate Plots)
# --------------------------------------------------------------------
ggplot(smoothed_norm, aes(x = position, y = similarity)) +
geom_line(size = 1, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.2) +
facet_wrap(~deliberation_function, scales = "free_y") +
theme_minimal() +
labs(x = "Normalized Position", y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Normalized Position)")
ggsave("./Output/mean_trajectory_norm_facets.png", dpi = 600, width = 12, height = 8)
# --------------------------------------------------------------------
# Aggregate Mean Trajectories per Word Position by Response
# --------------------------------------------------------------------
mean_trajectory_resp <- results_df %>%
group_by(response, deliberation_function, start_word) %>%
summarise(similarity = mean(similarity, na.rm = TRUE)) %>%
rename(position = start_word)
# --------------------------------------------------------------------
# Aggregate Mean Trajectories per Normalized Position by Response
# --------------------------------------------------------------------
mean_trajectory_norm_resp <- results_df %>%
group_by(response, deliberation_function, normalized_position) %>%
summarise(similarity = mean(similarity, na.rm = TRUE)) %>%
rename(position = normalized_position)
# --------------------------------------------------------------------
# Smoothing Function for Response Grouping
# --------------------------------------------------------------------
smooth_trajectory_response <- function(df, window = 5) {
df %>%
group_by(response, deliberation_function) %>%
arrange(position) %>%
mutate(similarity = rollmean(similarity, k = window, fill = NA, align = "center")) %>%
drop_na()
}
# --------------------------------------------------------------------
# Plot Per-Word Position Trajectory by Response (All Functions Together)
# --------------------------------------------------------------------
smoothed_resp <- smooth_trajectory_response(mean_trajectory_resp, window = 10)
ggplot(smoothed_resp, aes(x = position, y = similarity, color = deliberation_function)) +
geom_line(size = 1, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.4) +
facet_wrap(~response, scales = "free_y") +
theme_minimal() +
labs(x = "Position in Transcription (Words)",
y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Words) by Response")
ggsave("../Output/mean_trajectory_per_word_by_response.png", dpi = 600, width = 14, height = 8)
# --------------------------------------------------------------------
# Plot Normalized Position Trajectory by Response (All Functions Together)
# --------------------------------------------------------------------
smoothed_norm_resp <- smooth_trajectory_response(mean_trajectory_norm_resp, window = 20)
ggplot(smoothed_norm_resp, aes(x = position, y = similarity, color = deliberation_function)) +
geom_line(size = 1, alpha = 0.4) +
geom_smooth(method = "loess", size = 1, se = FALSE, span = 0.4) +
facet_wrap(~response, scales = "free_y") +
theme_minimal() +
labs(x = "Normalized Position in Transcription",
y = "Mean Similarity",
title = "Mean Activation Trajectory per Function (Normalized Position) by Response")
ggsave("../Output/mean_trajectory_norm_by_response.png", dpi = 600, width = 14, height = 8)
